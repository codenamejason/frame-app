generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  email     String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String?
  id        Int      @id @default(autoincrement())

  @@index([id, address])
}

model Ranking {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  rankGiven    Int
  pickedPairId Int?
  pickedPair   PickedPair? @relation(fields: [pickedPairId], references: [id])

  @@index([id])
}

model Metadata {
  protocol Int
  pointer  String
  id       Int       @id @default(autoincrement())
  project  Project[]
}

model Project {
  name        String
  description String?   @default("No description has been provided yet.")
  status      Status?   @default(ACTIVE)
  type        Type?     @default(INDIVIDUAL)
  address     String?
  id          Int       @id @default(autoincrement())
  updatedAt   DateTime  @default(now())
  metadataId  Int?
  metadata    Metadata? @relation(fields: [metadataId], references: [id])

  @@index([id, address])
}

model Vote {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  pickedPairId Int
  userId       Int
  pickedId     Int

  @@index([id, pickedPairId])
}

model PickedPair {
  id             Int       @id @default(autoincrement())
  pickedAt       DateTime  @default(now())
  projectPairIds Int[]
  rankings       Ranking[]

  @@index([id, projectPairIds])
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Type {
  COLLECTION
  INDIVIDUAL
}
